{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation of basic programs (HAMK BYOD) in students' personal devices (Windows).","text":"<p>The following guidelines utilizes the chocolatey package manager for Windows to install several applications that are used in different modules in HAMK. </p> <p>The provided instructions use the Chocolatey package manager on Windows to install various applications needed for different modules at HAMK. It's important to install these tools on the device you'll use for studying, as they'll be essential throughout your studies. </p> Note <p>Remember, if you switch to a new device, just follow these instructions to ensure you have the necessary tools:</p>"},{"location":"#step-0","title":"Step 0","text":"<p>Make sure that your computer meets HAMK BYOD requirements. You can find the requirements from here</p> <p>Main points are: - Windows 11 (23H2 or newer) - 16 GB of memory</p>"},{"location":"#step-1-install-chocolatey","title":"Step 1: Install CHOCOLATEY","text":"<p>Chocolatey is a popular package manager for Windows that simplifies the process of installing, updating, and managing software applications. It allows users to automate the installation of a wide range of software with a single command, making it efficient and convenient. Chocolatey provides access to a vast repository of pre-packaged software packages, which can be easily installed, updated, or removed using command-line instructions. This tool streamlines software management on Windows systems, enhancing productivity and reducing the manual effort required for software maintenance.</p> Requirements <ul> <li>Windows 7 or newer version of Windows Operating System (Recommended Windows 10 or 11)</li> <li>PowerShell v2+</li> <li>.NET Framework 4+ </li> </ul> Installation Process <ul> <li>Start Powershell with Administrator rights (Run as Administrator) If you already have choco installed in your device, run the following command in your powershell </li> </ul> <p>This will remove chocolatey from your computer! For re-installing only!</p> Powershell as Administrator<pre><code>rm -Path \"C:\\ProgramData\\chocolatey\" -Recurse -Force\nrm -Path \"C:\\ProgramData\\ChocolateyHttpCache\" -Recurse -Force\n</code></pre> <p>Lets understand what you did with above command: </p> <ul> <li><code>rm</code>: It deletes files or directories in this case it deletes the chocolatey directory.</li> <li><code>-erroraction 'silentlycontinue'</code>: This part of the command tells PowerShell to continue executing the script without displaying an error message if the removal encounters an error (e.g., if the directory doesn't exist).</li> </ul> <p>Run the following command in Powershell to install CHOCOLATEY</p> PowerShell<pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force; iwr https://community.chocolatey.org/install.ps1 -UseBasicParsing | iex\n</code></pre>"},{"location":"#step-2-programsapps-installation","title":"Step 2: Programs/Apps Installation","text":"<p>After successfully installing the Chocolatey package manager, you can use it to install multiple apps simultaneously. This saves you significant time compared to installing each app individually. </p> <p>The list of apps that you are going to install is as below: </p> <p>powershell-core, git, vscode, putty, firefox, greenshot,google-drive-file-stream, googlechrome, safeexambrowser, notepadplusplus, winscp, 7zip,  paint.net, windirstat, zoom, sudo, vmrc, vmware-horizon-client, docker-desktop &amp; obs-studio powertoys</p> <p>To install the above mentioned programs run the following script</p> PowerShell<pre><code>choco install powershell-core git vscode putty greenshot notepadplusplus winscp 7zip paint.net windirstat zoom sudo vmrc vmware-horizon-client obs-studio docker-desktop google-drive-file-stream googlechrome safeexambrowser firefox curl powertoys vmwareworkstation -y\n</code></pre>"},{"location":"#step-3-installing-some-useful-vscode-addons","title":"Step 3: Installing some useful VScode addons","text":"<ul> <li>Restart your Powershell session </li> <li>Run the following commands </li> </ul> PowerShell<pre><code>code --install-extension ms-vscode.powershell\ncode --install-extension vsls-contrib.gistfs\ncode --install-extension ms-vscode-remote.remote-containers\ncode --install-extension ms-azuretools.vscode-docker\ncode --install-extension ms-vscode-remote.vscode-remote-extensionpack\ncode --install-extension GitHub.copilot\ncode --install-extension GitHub.vscode-pull-request-github\n</code></pre>"},{"location":"#step-4-create-github-account","title":"Step 4: Create GitHub Account","text":"<p>As you progress through your upcoming courses and projects, you'll begin using version control. GitHub, a platform for version control is mainly used at HAMK. You'll start by setting up your own GitHub account. If you already have one,  you don't need to make a new account. While you'll study further into version control concepts in the future, your initial step involves creating an account and getting Git up and running on your personal device.</p> <p>Create GitHub Account</p> <p>If you already have a GitHub account, you can sign in and if you don't have one, you can create a new GitHub account by following the instructions below:  </p> <ol> <li>Go to GitHub Sign up Page</li> <li>Fill in the Sign Up form. </li> <li>Verify your Email address. GitHub will send a verification email to the email address you provided. Go to your email inbox, find the email from GitHub, and click the verification link.</li> </ol> <p>Congratulations! Once your email is verified, your account is ready. You can now start using GitHub to create repositories, contribute to projects and collaborate with others.</p>"},{"location":"#link-your-hamk-email","title":"Link your HAMK email","text":"<p>Linking your school email to your GitHub account can offer several benefits, especially if you plan to use GitHub for both personal and academic purposes. When you link your your school email with your GitHub account:    - It helps to verify your identity which is important when collaborating on academic projects during the module.    - You might have access to educational resources for students or discounts. </p> <p>Mandatory for all </p> <p>Warning</p> <p>It is mandatory for all students to get the GitHub Student Developer Pack, which is used in education.</p> <p>Please follow the instructions below: </p> <ol> <li>Login to GitHub using your personal account. </li> <li>Once logged in, go to your GitHub account settings.</li> <li>In the left sidebar of the Settings page, click on \"Emails.\"</li> <li>In the \"Primary email address\" section, you should see your personal email address associated with your account. Below that, you can click on the \"Add email address\" button to add your school email address.</li> <li>GitHub will send a verification email to your school email address. Check your school inbox, open the email, and click on the verification link provided.</li> </ol> <p>Now, you'll have both your personal email and school email associated with your GitHub account. You can choose which email to use when making commits or changes. </p>"},{"location":"#step-5-activate-github-student-developer-pack","title":"Step 5: Activate GitHub Student Developer Pack","text":"<p>The GitHub Student Pack is a service meant to help students with their coding and development projects. It offers a variety of significant advantages including\u00a0free access to premium developer tools, learning materials such as online courses and tutorials, cloud credits for experimentation, and opportunities to obtain hands-on experience with industry-standard technologies. Students can also get domain names for their projects, join a friendly community, and participate in hackathons and coding contests. </p> <p>To activate the GitHub Student Developer Pack, follow these steps:</p> <ol> <li>Access the Student Developer Pack:  Once Signed in to GitHub and linking up your school's email account, access the   Sign Up for Student Development Pack page.</li> <li>Select your academic status as Student. </li> <li>Fill in the form and Click Continue. </li> </ol> <p>Note: Verification may be required based on the situation. In such cases, you can utilize your mobile student card to complete the verification process.</p>"},{"location":"#step-6-configure-git","title":"Step 6: Configure Git","text":"<p>You have installed Git in Step 2. You need to configure Git by providing your full name and email address.You can start GitHub Desktop and configure using the graphical user interface as shown in the diagram below or use the command line. </p> <p> </p> <p>Configure Git with command line</p> <ol> <li>Open Git Bash. </li> <li>Set your username and email, which will be associated with your commits. Use these commands, replacing \"Your Name\" and \"your.email@example.com\" with your actual information:</li> </ol> <p>Bash<pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email your.email@example.com\n</code></pre> Check your Git Configuration</p> Bash<pre><code>git config --list\n</code></pre> <p>You're now set up to use Git on Windows. You can create repositories, make commits, and interact with remote repositories using Git commands. </p> <p>Congratulations on successfully installing the essential applications necessary for your studies at HAMK. As you progress, there might be a need to install additional applications.</p>"},{"location":"HAMK_BASIC_Software_MacUsers/","title":"Installation of basic programs (HAMK BYOD) in students' personal devices (Mac Users)","text":"<p>The following guidelines utilize the brew package manager for macOS to install several applications that are used in different modules in HAMK. </p>"},{"location":"HAMK_BASIC_Software_MacUsers/#step-0","title":"Step 0","text":"<p>Make sure that your computer meets HAMK BYOD requirements. You can find the requirements from here. Main requirements is to have 16GB of memory for virtualization and development.</p>"},{"location":"HAMK_BASIC_Software_MacUsers/#step-1-installing-apple-development-environment-xcode-and-brew","title":"Step 1: Installing Apple development environment Xcode and Brew","text":""},{"location":"HAMK_BASIC_Software_MacUsers/#requirements","title":"Requirements","text":"<ul> <li>A 64-bit Intel CPU or Apple Silicon CPU 1</li> <li>macOS Catalina (10.15) (or higher) 2</li> <li>Command Line Tools (CLT) for Xcode (from xcode-select --install or https://developer.apple.com/download/all/) or Xcode 3</li> <li>Terminal emulator</li> </ul> <p>Open a Terminal by clicking the Spotlight (magnifying glass) icon in the menu bar or press Command-Space bar and type: \"Terminal\"</p> <p>Install the required development environment components</p> <p>Bash<pre><code>xcode-select --install\n</code></pre> Install Brew package manager</p> Bash<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n</code></pre> <p>Under \"==&gt; Next steps:\" Read and copy tree lines of code to terminal and execute it. Here are the examples</p> Bash<pre><code>echo '# Set PATH, MANPATH, etc., for Homebrew.' &gt;&gt; /Users/$USER/.zprofile\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; /Users/$USER/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n</code></pre>"},{"location":"HAMK_BASIC_Software_MacUsers/#step-2-programsapps-installation-using-brew","title":"Step 2: Programs/Apps Installation using Brew","text":""},{"location":"HAMK_BASIC_Software_MacUsers/#the-list-of-applications-that-you-are-going-to-install","title":"The list of applications that you are going to install","text":"<p>Vscode, vmware-horizon-client, disk-inventory, Git, Github, obs, Vmware-fusion, Google Drive, Google Chrome, UTM virtualization software, Teams, Cyberduck, Docker,  Zoom and Displaylink USB dock drivers.</p>"},{"location":"HAMK_BASIC_Software_MacUsers/#to-install-the-above-mentioned-programs-run-the-following-script","title":"To install the above-mentioned programs run the following script","text":"Bash<pre><code>brew install --cask visual-studio-code; brew install --cask vmware-horizon-client; brew install --cask disk-inventory-x; brew install --cask zoom; brew install git; brew install --cask github; brew install --cask obs; brew install --cask utm; brew install --cask google-drive; brew install --cask docker; brew install --cask google-chrome; brew install --cask microsoft-teams; brew install --cask cyberduck; brew install --cask displaylink; brew install --cask safe-exam-browser; brew install --cask vmware-fusion\n</code></pre>"},{"location":"HAMK_BASIC_Software_MacUsers/#step-3-apple-store","title":"Step 3: Apple store","text":"<p>We are still missing few basic software for BIT studies and basic use.  We still need to install Vmware Horizon client, Microsoft Office and Vmware console.  Alternative software to Vmware Horizon client (VDI) is Citrix Secure Access a HAMK VPN service.  You can not run this software at the same time.</p> <p></p>"},{"location":"HAMK_BASIC_Software_MacUsers/#step-4-installing-some-useful-vscode-addons","title":"Step 4: Installing some useful VScode addons","text":"<p>Open a terminal and run the following command to install VScode Addons/Extensions</p> Bash<pre><code>code --install-extension ms-vscode.powershell\ncode --install-extension vsls-contrib.gistfs\ncode --install-extension ms-vscode-remote.remote-containers\ncode --install-extension ms-azuretools.vscode-docker\ncode --install-extension ms-vscode-remote.vscode-remote-extensionpack\ncode --install-extension GitHub.copilot\n</code></pre>"},{"location":"HAMK_BASIC_Software_MacUsers/#apple-ui-changes","title":"Apple UI changes","text":"<p>We recommend a few changes to the mac operating system that will help you with file management and programming. These are Show items on desktop, File Extensions and Path bar.</p>"},{"location":"HAMK_BASIC_Software_MacUsers/#step-1-enable-show-items-on-desktop-and-show-file-extension","title":"Step 1: Enable show items on desktop and show file extension","text":""},{"location":"HAMK_BASIC_Software_MacUsers/#step-2-show-file-path","title":"Step 2: Show file path","text":""},{"location":"HAMK_BASIC_Software_MacUsers/#step-3-get-hidden-files-visible-like-ssh-folder","title":"Step 3: Get hidden files visible (Like .ssh folder)","text":"<p>Go to Parent folder press Cmd + Shift + . to reveal the hidden folder and files. When you no longer want to see them click Command + Shift + . again.</p>"},{"location":"HAMK_BASIC_Software_MacUsers/#step-5-git-and-github","title":"Step 5: Git and Github","text":"<p>As you progress through your upcoming courses and projects, you'll begin using version control. GitHub, a platform for version control is mainly used at HAMK. You'll start by setting up your own GitHub account. If you already have one,  you don't need to make a new account. While you'll study further into version control concepts in the future, your initial step involves creating an account and getting Git up and running on your personal device.</p> <p>Create GitHub Account</p> <p>If you already have a GitHub account, you can sign in and if you don't have one, you can create a new GitHub account by following the instructions below:  </p> <ol> <li>Go to [GitHub Sign up Page] (https://github.com/signup)</li> <li>Fill in the Sign Up form. </li> <li>Verify your Email address. GitHub will send a verification email to the email address you provided. Go to your email inbox, find the email from GitHub, and click the verification link.</li> </ol> Congratulations! <p>Once your email is verified, your account is ready. You can now start using GitHub to create repositories, contribute to projects and collaborate with others.</p>"},{"location":"HAMK_BASIC_Software_MacUsers/#link-your-hamk-email","title":"Link your HAMK email","text":"<p>Linking your school email to your GitHub account can offer several benefits, especially if you plan to use GitHub for both personal and academic purposes. When you link your your school email with your GitHub account:    - It helps to verify your identity which is important when collaborating on academic projects during the module.    - You might have access to educational resources for students or discounts. </p> <p>Warning</p> <p>It is mandatory for all students to get the GitHub Student Developer Pack, which is used in education.</p> <p>Please follow the instructions below: </p> <ol> <li>Login to GitHub using your personal account. </li> <li>Once logged in, go to your GitHub account settings.</li> <li>In the left sidebar of the Settings page, click on \"Emails.\"</li> <li>In the \"Primary email address\" section, you should see your personal email address associated with your account. Below that, you can click on the \"Add email address\" button to add your school email address.</li> <li>GitHub will send a verification email to your school email address. Check your school inbox, open the email, and click on the verification link provided.</li> </ol> <p>Now, you'll have both your personal email and school email associated with your GitHub account. You can choose which email to use when making commits or changes. </p>"},{"location":"HAMK_BASIC_Software_MacUsers/#step-6-activate-github-student-developer-pack","title":"Step 6: Activate GitHub Student Developer Pack","text":"<p>The GitHub Student Pack is a service meant to help students with their coding and development projects. It offers a variety of significant advantages including\u00a0free access to premium developer tools, learning materials such as online courses and tutorials, cloud credits for experimentation, and opportunities to obtain hands-on experience with industry-standard technologies. Students can also get domain names for their projects, join a friendly community, and participate in hackathons and coding contests. </p> <p>To activate the GitHub Student Developer Pack, follow these steps:</p> <ol> <li>Access the Student Developer Pack:  Once Signed in to GitHub and linking up your school's email account, access the   Sign Up for Student Development Packpage.</li> <li>Select your academic status as Student. </li> <li>Fill in the form and Click Continue. </li> </ol> Note <p>Verification may be required based on the situation. In such cases, you can utilize your mobile student card to complete the verification process.</p>"},{"location":"HAMK_BASIC_Software_MacUsers/#step-7-configure-git","title":"Step 7: Configure Git","text":"<p>You have installed Git in Step 2. You need to configure Git by providing your full name and email address.You can start GitHub Desktop and configure using the graphical user interface as shown in the diagram below or use the command line. </p> <p> </p> <p>Configure Git with command line</p> <ol> <li>Open Git Bash. </li> <li>Set your username and email, which will be associated with your commits. Use these commands, replacing \"Your Name\" and \"your.email@example.com\" with your actual information:</li> </ol> <p>Bash<pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email your.email@example.com\n</code></pre> Check your Git Configuration</p> <p>Bash<pre><code>git config --list\n</code></pre> Congratulations, you have installed most of the required applications that you need while studying at HAMK. Over time, you will need to install additional applications.</p> <p>All completed!</p>"},{"location":"HAMK_BASIC_Software_MacUsers/#step-9-virtual-machines-platforms","title":"Step 9: Virtual machines platforms","text":"<p>You have two good options for virtual machines platforms: Vmware Fusion and Parallels. Vmware Fusion is free for personal use and Parallels is paid. You can choose the one that suits you best. </p> Note <p>For now Apple computers are not supporting nested virtualization so Docker and Kubernetes need to be installed to the host machine.</p> <p>Parallels</p> <p>We recommend owners of Mac computers to use Parallels software, which enables Windows programs to run. Parallels and other software used in teaching are heavy, so we also recommend that Apple computers have at least 16 GB of memory and an M2 series processor. The recommendation applies to level 2-3 in the computer recommendation for educational programs. You can download the Parallels software from https://www.parallels.com/landingpage/pd/education/. You can get the student discount by HAMK email. The order process goes as follows \u201cBuy now -&gt; Can't find your institution? -&gt; enter my.email@student.hamk.fi</p> <p>Vmware Fusion</p> <p>Vmware Fusion is free, but needs more configuration than Parallels. So we recommend Parallels for new Mac users. If you are familiar with virtual machines, you can use Vmware Fusion. For smooth working we recommend least 16 GB of memory and an M2 series processor. You can download the Vmware Fusion software from https://www.vmware.com/go/get-fusionplayer-key</p> <p>HAMK Vcommander</p> <p>Third option is to use HAMK Vcommander service, but compared to Parallels and Vmware Fusion, it is not as good. You can find more information about Vcommander from https://www.hamk.fi/it-service-catalog/virtual-it-lab-embotics-vcommander/?lang=en</p>"},{"location":"HAMK_BASIC_Software_MacUsers/#here-are-some-recommended-apps-for-faster-multitasking","title":"Here are some recommended apps for faster multitasking.","text":"<p>Mac Windows manager / Windows snaping tool </p> <ul> <li>https://rectangleapp.com/</li> </ul> <p>Per-device scrolling preferences on macOS. </p> <ul> <li>https://github.com/pilotmoon/Scroll-Reverser</li> </ul> <p>Warp terminal </p> <ul> <li>Warp terminal and New incredible macOS terminal! (warp + starship + zsh)</li> </ul> <p>Menu bar manager</p> <ul> <li>Ice  is a powerful menu bar management tool. While its primary function is hiding and showing menu bar items, it aims to cover a wide variety of additional features to make it one of the most versatile menu bar tools available.</li> </ul> Bash<pre><code>brew install jordanbaird-ice\n</code></pre>"},{"location":"Windows_11_WSL/","title":"How to install WSL2 to your computer  (Windows 11) ?","text":""},{"location":"Windows_11_WSL/#installation-process-with-powershell","title":"Installation Process (with PowerShell)","text":"<ul> <li> <p>Start Powershell with Administrator rights (Run as Administrator)</p> </li> <li> <p>WSL will be installed to your computer and in the default setting it will download latest Ubuntu</p> <p>If you already have wsl installed you should make sure that it is updated.  Use command <code>wsl --update</code> to update it.</p> </li> </ul> <p>Bash<pre><code>wsl --install\n</code></pre> </p>"},{"location":"Windows_11_WSL/#set-default-wsl-version-and-check-installed-distributions","title":"Set default WSL version and check installed distributions","text":"<p>Bash<pre><code>wsl --set-default-version 2\nwsl --list --verbose \nwsl -l -v \n</code></pre> </p>"},{"location":"Windows_11_WSL/#see-a-list-of-the-linux-distributions-available-through-the-online-store","title":"See a list of the Linux distributions available through the online store.","text":"Bash<pre><code>wsl --list --online\n</code></pre>"},{"location":"Windows_11_WSL/#lets-install-ubuntu-2404-and-debian-distribution-we-will-use-ubuntu-2404-as-main-platform-and-debian-for-testing-for-this-reason-we-will-start-by-removing-default-ubuntu-from-your-pc","title":"Lets install Ubuntu 24.04 and Debian Distribution. We will use Ubuntu 24.04 as main platform and Debian for testing. For this reason we will start by removing default Ubuntu from your pc","text":"<p>Bash<pre><code>wsl --unregister Ubuntu\n</code></pre> Bash<pre><code># Run the command below to install Ubuntu 24.04. Recommended.\nwsl --install --web-download --distribution Ubuntu-24.04 \n\n# Run the command below. If you get the error message when trying to install with the above command. \nwsl --install -d Ubuntu-24.04 \n</code></pre> Bash<pre><code># Run the command below to install Debian. Recommended.\nwsl --install --web-download --distribution Debian\n\n# Run the command below. If you get the error message when trying to install with the above command. \nwsl --install -d Debian\n</code></pre> Bash<pre><code>wsl --setdefault Ubuntu-24.04\n</code></pre></p>"},{"location":"Windows_11_WSL/#updating-wsl-distribution-using-powershell","title":"Updating WSL distribution using Powershell","text":"Bash<pre><code>wsl -d Ubuntu-24.04 -u root bash -c 'apt update ; apt upgrade -y'\nwsl -d Debian -u root bash -c 'apt update ; apt upgrade -y'\n</code></pre>"},{"location":"Windows_11_WSL/#enabling-systemd-to-your-default-wsl-distribution-ubuntu-2404","title":"Enabling systemd to your default WSL distribution Ubuntu-24.04","text":"<p>We are starting to use systemd, which brings WSL Linux closer to a virtual machine or physical installation</p> Bash<pre><code>wsl -u root -d Ubuntu-24.04 bash -c \"touch /etc/wsl.conf\"\nwsl -u root -d Ubuntu-24.04 bash -c \"echo [boot] &gt;&gt; /etc/wsl.conf\" \nwsl -u root -d Ubuntu-24.04 bash -c \"echo systemd=true &gt;&gt; /etc/wsl.conf\" \nwsl -t Ubuntu-24.04\n</code></pre>"},{"location":"Windows_11_WSL/#upgrading-wsl-1-to-wsl-2-only-if-yours-wsl-version-is-1","title":"Upgrading WSL 1 to WSL 2 (only if yours WSL version is 1)","text":"<p>If you run <code>wsl -l -v</code> and it shows your WSL version as 1, follow the steps below:</p> <p>Note: If you manually installed WSL before the <code>wsl --install</code> command was available, you need to manually install the Linux kernel package. You can find the detailed guide at the link below: Detailed Installation Guide</p>"},{"location":"Windows_11_WSL/#steps-to-upgrade","title":"Steps to Upgrade","text":"<ol> <li>Install the Linux kernel package as per the detailed guide above.</li> <li> <p>Open PowerShell as Administrator and run the following commands:</p> Bash<pre><code>wsl --set-version Ubuntu-24.04 2\nwsl --set-version Debian 2\n</code></pre> </li> <li> <p>Re-check your WSL version with the command below to ensure it has been upgraded to version 2:</p> Bash<pre><code>wsl -l -v\n</code></pre> </li> </ol> Bash<pre><code>$contentToAdd = @\"\n[wsl2]\nmemory=4GB # Limits VM memory in WSL 2 to 4 GB\nprocessors=2 # Makes the WSL 2 VM use two virtual processors\n[experimental]\nautoMemoryReclaim=gradual\n\"@\n\nNew-Item $home\\.wslconfig\nAdd-Content $home\\.wslconfig $contentToAdd\nnotepad++ $home\\.wslconfig \n</code></pre> <p>Last command did open Notepad++ and it is showing curant configuration $home.wslconfig . If there is need to change default values now is good opportunity to change them base on your computer resources. Starting with WSL version 2.4.11, you can also make changes to the settings using the graphical tool <code>WSL Settings</code>. This tool is automatically installed when you install WSL.</p>"},{"location":"Windows_11_WSL/#limiting-amount-of-memory-and-cpu-wsl-can-use-change-values-as-needed","title":"Limiting amount of memory and cpu WSL can use. Change values as needed","text":"<p>Start Powershell with NORMAL user rights and copy all command in to it. </p>"},{"location":"Windows_11_WSL/#how-to-backup-wsl-and-remove-it-from-the-machine-to-save-space","title":"How to backup WSL and remove it from the machine to save space","text":""},{"location":"Windows_11_WSL/#export-and-import-a-ubuntu-distribution-to-a-tar-file","title":"Export and import a Ubuntu distribution to a TAR file","text":"Bash<pre><code>wsl --export Ubuntu-24.04 \"G:\\My Drive\\Ubuntu_wsl_backup_24.04.tar\"\n</code></pre> <p>Import a new distribution</p> Bash<pre><code>wsl --import Ubuntu-24.04-Base \"c:\\temp\\\" \"G:\\My Drive\\Ubuntu_wsl_backup_24.04.tar\"\n</code></pre> <p></p>"},{"location":"Windows_11_WSL/#uninstalling-command-is-unregister-use-only-if-needed","title":"Uninstalling command is --unregister (Use only if needed)","text":"<p>No need to remove WSL distribution if everything is working</p> Bash<pre><code>wsl --unregister Ubuntu-24.04\nwsl --unregister Debian\n</code></pre>"},{"location":"Windows_11_WSL/#problem-solving","title":"Problem Solving","text":"<p>Update Windows computer and WSL. Start Powershell with Administrator rights as many times is needed. Go through repairs in order and test regularly.</p> Bash<pre><code># Install Windows update modules\nInstall-Module PSWindowsUpdate -Confirm\nSet-ExecutionPolicy -Scope Process -ExecutionPolicy unrestricted\nImport-Module PSWindowsUpdate\nGet-WindowsUpdate\nInstall-WindowsUpdate\n# Reboot as needed \nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All\n</code></pre> <p>Hyper-V still not working? Jump to \"Hyper-V still not working?\" otherwise, move on with WSL install</p>"},{"location":"Windows_11_WSL/#lets-check-that-wsl-is-installed","title":"Let's check that WSL is installed","text":"Bash<pre><code>wsl --install\n</code></pre>"},{"location":"Windows_11_WSL/#update-wsl-kernel","title":"Update WSL kernel","text":"Bash<pre><code>wsl --update\n</code></pre>"},{"location":"Windows_11_WSL/#reinstall-ubuntu-debian-and-docker-images-this-will-result-in-lost-data-if-you-have-not-save-data-on-your-host-machine","title":"Reinstall Ubuntu, Debian and Docker images. THIS WILL RESULT IN LOST DATA if you have not save data on your host machine!","text":"Danger: data lost! <p>THIS WILL RESULT IN DATA LOST if you have not saved data on your host machine! Bash<pre><code>Stop-Process -Name \"Docker Desktop\" -Force\nwsl --unregister Ubuntu-24.04\nwsl --unregister Ubuntu\nwsl --unregister Debian\nwsl --unregister docker-desktop-data\nwsl --unregister docker-desktop\nwsl --set-default-version 2\nwsl --install --web-download --distribution Ubuntu-24.04\n</code></pre></p> <p>Now we need to update WSL Ubuntu-24.04 to update Bash<pre><code>wsl -d Ubuntu-24.04 -u root bash -c 'apt update ; apt upgrade -y'\nwsl --setdefault Ubuntu-24.04\n</code></pre></p>"},{"location":"Windows_11_WSL/#hyper-v-still-not-working","title":"Hyper-V still not working?","text":"<p>Forcing Hyper-v to start using Windows bootloader. </p> <ul> <li>Start Powershell with Adminitrator rights (Run as Administrator)</li> </ul> Text Only<pre><code>bcdedit /set hypervisorlaunchtype auto\n</code></pre> <p>More command can be found https://docs.microsoft.com/en-us/windows/wsl/basic-commands</p>"},{"location":"Windows_11_license_from_home_to_education_and_activate_Hyper-V/","title":"How to update Windows 11 license from home to education and activate Hyper-V?","text":""},{"location":"Windows_11_license_from_home_to_education_and_activate_Hyper-V/#step-1-backup-windows-license","title":"Step 1: Backup Windows license","text":"<ul> <li>Start Powershell or Command Prompt with administrator privileges.</li> <li>Run the following command to save the Windows License key as a text file named license.txt PowerShell<pre><code>(Get-WmiObject -Class SoftwareLicensingService).OA3xOriginalProductKey | Out-File license.txt\n</code></pre> Or you may also run the following command, the following command displays the the product key in the Command Prompt or PowerShell window </li> </ul> PowerShell<pre><code>wmic path SoftwareLicensingService get OA3xOriginalProductKey\n</code></pre> Info <ul> <li>Save it in a safe place \ud83d\ude0a</li> </ul> Note <p>Microsoft is slowly moving to a digital licenses that are tied to your laptop\u2019s hardware or Microsoft account. In this situation you WILL NOT get a license key because activation will be done without it.` Read more from here</p>"},{"location":"Windows_11_license_from_home_to_education_and_activate_Hyper-V/#step-2-getting-a-new-windows-11-education-license","title":"Step 2: Getting a new Windows 11 Education license","text":"<ol> <li> <p>Log in to Azure For Education.</p> </li> <li> <p>Once logged in, navigate to the \"Windows 11\" section.</p> </li> </ol> <p></p> <ol> <li> <p>In the \"Windows 11\" section, you will find the product key associated with the Windows 11 Educational version.</p> </li> <li> <p>View the key and make sure to save it to your computer.</p> </li> </ol>"},{"location":"Windows_11_license_from_home_to_education_and_activate_Hyper-V/#step-3-activate-your-new-product-key","title":"Step 3: Activate your new product key","text":"<p>Please follow these steps to activate a new product key in Windows:</p> <ol> <li> <p>Open Settings: Click the Start button, then click the Settings.</p> </li> <li> <p>Update &amp; Security: Select Update &amp; Security from the Settings window.</p> </li> <li> <p>Activation: In the left sidebar, click Activation.</p> </li> <li> <p>Change Product Key: Under Activation, click Change product key.</p> </li> <li> <p>Enter Key: Input your new product key.</p> </li> <li> <p>Activate: Click Next and follow the prompts to activate Windows.</p> </li> <li> <p>Restart: If required, restart your computer to apply the changes.</p> </li> </ol> <p></p> Note <p>Sometimes, updating your Windows license might lead to unexpected errors. Don't be surprised \u2013 it's just Microsoft's unique way of saying \"Job well done!\" </p> <p>Windows license / Activation settings does not agree to change?</p> <p>Some laptop manufacturers do not test their Windows 11 install image upgrade to Edu/Pro. Typical fix for there problems are following commands in Powershell as a Administrator</p> PowerShell<pre><code>SFC /SCANNOW \nDISM /Online /Cleanup-Image /StartComponentCleanup \nDISM /Online /Cleanup-Image /RestoreHealth\n</code></pre> <p>Now boot your computer and try changing license again</p>"},{"location":"Windows_11_license_from_home_to_education_and_activate_Hyper-V/#tmp-enabling-virtualization-in-biosuefi","title":"TMP / Enabling Virtualization in BIOS/UEFI","text":"<ul> <li>How to enable virtualization?  </li> <li>How to access BIOS settings for different manufacturer? </li> </ul>"},{"location":"Windows_11_license_from_home_to_education_and_activate_Hyper-V/#how-to-activate-hyper-v","title":"How to Activate Hyper-V?","text":"<p>To enable Hyper-V on your Windows machine, follow these steps:</p> <ol> <li> <p>Open Control Panel: Search \"Control Panel\" in the search box and click \"Control Panel\" to open it.</p> </li> <li> <p>Programs and Features: Click on \"Programs\" and then select \"Turn Windows features on or off.\"</p> </li> <li> <p>Enable Hyper-V: In the \"Windows Features\" window, scroll down and find \"Hyper-V.\" Check the box next to \"Hyper-V\" to enable it.</p> </li> <li> <p>Optional Features: You might also want to select additional Hyper-V features like \"Hyper-V Management Tools\" and \"Hyper-V Platform\" for a comprehensive experience.</p> </li> <li> <p>Confirm and Install: Click \"OK\" to confirm the changes. Windows will install the necessary components.</p> </li> <li> <p>Restart: After the installation is complete, you'll be prompted to restart your computer. Save your work and click \"Restart.\"</p> </li> </ol> <p>Remember, enabling Hyper-V requires administrative privileges and may impact other virtualization software you might be using. If you encounter issues or need to run software that conflicts with Hyper-V, you can always disable it by following similar steps and unchecking the \"Hyper-V\" box.</p> <p>Activating Hyper-V Using PowerShell</p> <p>To activate Hyper-V on your Windows machine using PowerShell, follow these steps:</p> <ol> <li> <p>Open PowerShell: Start Windows PowerShell with administrative privileges.</p> </li> <li> <p>Run Command: In the PowerShell window, enter the following command to enable Hyper-V:    PowerShell<pre><code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All\n</code></pre></p> </li> </ol> <p></p> <p>Restart your computer finalize the changes to your operating system</p> <p>Congratulations, you have updated your Windows 11 license and activated Hyper-v</p>"},{"location":"Windows_11_license_from_home_to_education_and_activate_Hyper-V/#hyper-v-still-not-working","title":"Hyper-V still not working?","text":"<p>Forcing Hyper-v to start using Windows bootloader. </p> <ul> <li>Start Powershell with Administrator rights (Run as Administrator)</li> </ul> PowerShell<pre><code>bcdedit /set hypervisorlaunchtype auto\n</code></pre> <p>Need to shut down Hyper-v for compative gaming?</p> <p>Let's generate new Windows boot option for NO Hyper-v running. You need to modify the command to match the bootloader tag</p> <p></p> PowerShell<pre><code>  bcdedit /copy {current} /d \"Windows 11 no Hyper-V\"\n  bcdedit /set {Add your identifier here} hypervisorlaunchtype Off\n</code></pre>"}]}